plugins {
    id 'com.android.library'
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 29
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

def getNativeDependencyRoot() {
    return new File(project.buildDir, "intermediates/native_deps")
}

def getExtractedNativeDependenciesDir() {
    return new File(getNativeDependencyRoot(), "extracted_native_dependencies")
}
injectNativeDependenciesPath()

def injectNativeDependenciesPath() {
    def extractedNativeDepsDir = getExtractedNativeDependenciesDir()

    def ndkBuildOpt = project.android.defaultConfig.externalNativeBuild.ndkBuild
    ndkBuildOpt.getArguments().add('EXT_DEP=' + extractedNativeDepsDir.absolutePath)

    def cmakeOpt = project.android.defaultConfig.externalNativeBuild.cmake
    cmakeOpt.getArguments().add('-DEXT_DEP=' + extractedNativeDepsDir.absolutePath)
}
